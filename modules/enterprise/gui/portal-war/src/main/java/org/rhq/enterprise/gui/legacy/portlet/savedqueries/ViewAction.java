/*
 * RHQ Management Platform
 * Copyright (C) 2005-2008 Red Hat, Inc.
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
package org.rhq.enterprise.gui.legacy.portlet.savedqueries;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.tiles.ComponentContext;
import org.apache.struts.tiles.actions.TilesAction;
import org.rhq.core.clientapi.util.StringUtil;
import org.rhq.enterprise.gui.legacy.Constants;
import org.rhq.enterprise.gui.legacy.WebUser;
import org.rhq.enterprise.gui.legacy.util.SessionUtils;

/**
 * An <code>Action</code> that loads the <code>Portal</code> identified by the <code>PORTAL_PARAM</code> request
 * parameter (or the default portal, if the parameter is not specified) into the <code>PORTAL_KEY</code> request
 * attribute.
 */
public class ViewAction extends TilesAction {
    // --------------------------------------------------------- Public Methods

    private static Log log = LogFactory.getLog(ViewAction.class.getName());

    @Override
    public ActionForward execute(ComponentContext context, ActionMapping mapping, ActionForm form,
        HttpServletRequest request, HttpServletResponse response) throws Exception {
        WebUser user = SessionUtils.getWebUser(request.getSession());

        //get all the displayed subtypes

        List<String> chartList = user.getPreferenceAsList(Constants.USER_DASHBOARD_CHARTS,
            Constants.DASHBOARD_DELIMITER);

        HashMap charts = new HashMap();

        for (Iterator i = chartList.iterator(); i.hasNext();) {
            List chart = StringUtil.explode((String) i.next(), ",");

            // the saved chart preference should have exactly two
            // elements: the name of the chart and the URL... so there
            // are things that can break stuff: commas or pipes in the name
            // of the chart -- these will be encoded in the action that saves
            // the preference but just to be safe, well defend against bogosity

            // if something bjorked the preference stringification
            // scheme, we can't display diddly squat about the preference
            if (chart.size() != 2) {
                // it's amazing but true: bogosity has been found
                if (log.isTraceEnabled()) {
                    log.trace("chart preference not understood: " + chart);
                }

                continue;
            }

            Iterator j = chart.iterator();
            String name = (String) j.next();
            String url = (String) j.next();

            // the name might be generated by user input, we need to make sure
            // their delimiters' presence in the names are deserialized from the
            // preference system
            name = StringUtil.replace(name, "&#124;", "|");
            name = StringUtil.replace(name, "&#44;", ",");
            charts.put(name, url);
        }

        context.putAttribute("charts", charts);

        return null;
    }
}