<?xml version="1.0" encoding="UTF-8"?>

<project name="rhq-client" basedir=".">
   
   <property name="jboss.home" location="${basedir}/target/rhq-server-${project.version}/jbossas" />
   <property name="wsdl.home" location="${project.build.outputDirectory}/wsdl" />
   <property name="wsconsume.home" location="${project.build.outputDirectory}/wsconsume-output" />
   <property name="wsprovide.home" location="${project.build.outputDirectory}/wsprovide-output" />
   <property name="include.client.jar" value="true" />

   <target name="prepare-dist">
      <condition property="exclude.cli.jar" value="true">
         <equals arg1="${rhq.client.build.exclude.cli.jar}" arg2="true" />
      </condition>
      <condition property="include.client.jar" value="true">
         <equals arg1="${rhq.client.build.include.client.jar}" arg2="true" />
      </condition>

      <antcall target="prepare-jbossws" />
      <antcall target="prepare-wsdl" />
   </target>


   <!-- To generate the client service classes we need portions of an AS distribution that provide
	   jbossws.  Use the enterprise container build zip as it has the updated JBossWS content. -->
   <target name="prepare-jbossws">
      <property name="container.zip" location="${settings.localRepository}/org/rhq/rhq-enterprise-server-container/${project.version}/rhq-enterprise-server-container-${project.version}.zip" />
      <condition property="container.uptodate">
         <and>
            <uptodate srcfile="${container.zip}" targetfile="${jboss.home}" />
            <available file="${jboss.home}/bin/wsprovide.bat" type="file" />
         </and>
      </condition>
      <antcall target="unzip-jboss" />
   </target>

   <target name="unzip-jboss" unless="container.uptodate">
      <unzip src="${settings.localRepository}/org/rhq/rhq-enterprise-server-container/${project.version}/rhq-enterprise-server-container-${project.version}.zip" dest="${basedir}/target">
         <patternset>
            <include name="rhq-server-${project.version}/jbossas/bin/ws*.*" />
            <include name="rhq-server-${project.version}/jbossas/lib/*.jar" />
            <include name="rhq-server-${project.version}/jbossas/lib/endorsed/*.jar" />
            <include name="rhq-server-${project.version}/jbossas/client/*.jar" />
         </patternset>
      </unzip>
   </target>

   <target name="prepare-wsdl" if="include.client.jar">
      <echo>*** Creating new wsdl</echo>
      <mkdir dir="${wsconsume.home}" />
      <mkdir dir="${wsprovide.home}" />

      <!--  This classpath basically provides the environment the wsprovide script creates.  So,it's
         JBossws version specific (and assumes compatibility between JBossws and AS -->

      <echo>The JAVA HOME being used: ${java.jre.home}</echo>
      <path id="jbossws.native.classpath">
         <fileset dir="${java.jre.home}/../lib/" includes="*.jar" />

         <!-- AS dependencies  -->
         <fileset dir="${jboss.home}/lib/endorsed/" includes="*.jar" />
         <fileset dir="${jboss.home}/lib/" includes="*.jar" />

         <!-- JBossws/AS client dependencies  -->
         <fileset dir="${jboss.home}/client">
            <include name="jbossws-spi.jar" />
            <include name="jbossws-common.jar" />
            <include name="jbossws-framework.jar" />

            <include name="activation.jar" />
            <include name="getopt.jar" />
            <include name="jbossall-client.jar" />
            <include name="log4j.jar" />
            <include name="mail.jar" />

            <include name="jaxb-api.jar" />
            <include name="jaxb-impl.jar" />
            <include name="jaxb-xjc.jar" />
            <include name="jaxws-tools.jar" />
            <include name="jaxws-rt.jar" />
            <include name="streambuffer.jar" />
            <include name="stax-ex.jar" />

            <include name="jboss-xml-binding.jar" />
            <include name="javassist.jar" />
            <include name="jbossws-native-client.jar" />
            <include name="jbossws-native-core.jar" />
            <include name="jbossws-native-jaxws.jar" />
            <include name="jbossws-native-jaxws-ext.jar" />
            <include name="jbossws-native-jaxrpc.jar" />
            <include name="jbossws-native-saaj.jar" />

            <include name="policy.jar" />
            <include name="wsdl4j.jar" />
            
            <!--Required for wsconsume -->
            <include name="wstx.jar" />
         </fileset>

         <!-- not sure why not in the maven.runtime.classpath -->
         <fileset dir="${settings.localRepository}/org/opensymphony/quartz/quartz/${quartz.version}/">
             <include name="quartz-${quartz.version}.jar" />
          </fileset>

      </path>

      <taskdef name="wsprovide" classname="org.jboss.wsf.spi.tools.ant.WSProvideTask" classpathref="jbossws.native.classpath" />
      <taskdef name="wsconsume" classname="org.jboss.wsf.spi.tools.ant.WSConsumeTask" classpathref="jbossws.native.classpath" />

      <echo>*** Providing SimpleManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.jaxb.SimpleManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ChannelManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.content.ChannelManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ConfigurationManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.configuration.ConfigurationManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ContentManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.content.ContentManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing OperationManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.operation.OperationManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ResourceManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.resource.ResourceManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing RoleManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.authz.RoleManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing SubjectManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.auth.SubjectManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Consuming SimpleManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/SimpleManagerBeanService.wsdl" />

      <echo>*** Consuming ChannelManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ChannelManagerBeanService.wsdl" />

      <echo>*** Consuming ContentManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ContentManagerBeanService.wsdl" />

      <echo>*** Consuming ConfigurationManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ConfigurationManagerBeanService.wsdl" />

      <echo>*** Consuming OperationManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/OperationManagerBeanService.wsdl" />

      <echo>*** Consuming ResourceManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ResourceManagerBeanService.wsdl" />

      <echo>*** Consuming RoleManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/RoleManagerBeanService.wsdl" />

      <echo>*** Consuming SubjectManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/SubjectManagerBeanService.wsdl" />
   </target>

</project>
