<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>rhq-parent</artifactId>
        <groupId>org.rhq</groupId>
        <version>4.3.0-SNAPSHOT</version>
        <relativePath>../../../../pom.xml</relativePath>
    </parent>

    <groupId>org.rhq</groupId>
    <artifactId>rhq-server-client-api</artifactId>
    <version>4.3.0-SNAPSHOT</version>
    <name>RHQ Enterprise Server Client API</name>
    <description>The implementation of the client API when accessing the server locally</description>

    <properties>
        <persistence-api.version>1.0</persistence-api.version>
        <rhq.server.datasource>java:/RHQDS</rhq.server.datasource>
        <rhq.server.ds-mapping>PostgreSQL</rhq.server.ds-mapping>
        
        <!-- dependency versions -->
        <jboss-embeddable-ejb3.version>1.0.0.Alpha9</jboss-embeddable-ejb3.version>
        
        <clean.db>true</clean.db>
    </properties>

    <dependencies>
    
      <!-- Note, the test deps are intentionally placed above the other scoped deps because of classpath
           reasons.  Maven orders the [test] classpath in the order listed in the pom.  We specifically
           need the embeddable-ejb3 jar above the standard ejb3 jars because we need the embeddble packages
           loaded when testing.  -->
      <dependency>
         <groupId>jboss.jboss-embeddable-ejb3</groupId>
         <artifactId>jboss-ejb3-all</artifactId>
         <version>${jboss-embeddable-ejb3.version}</version>
         <scope>test</scope>
      </dependency>
    
        <dependency>
            <groupId>org.rhq</groupId>
            <artifactId>rhq-script-bindings</artifactId>
            <version>${project.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>persistence-api</artifactId>
            <version>${persistence-api.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>hibernate-annotations</groupId>
            <artifactId>hibernate-annotations</artifactId>
            <!-- NOTE: The version is defined in the root POM's dependencyManagement 
                section. -->
            <scope>provided</scope>
        </dependency>
        
      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-ejb3x</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>provided</scope> <!-- by JBossAS -->
      </dependency>
      
      <!-- Test deps - this insane list of deps is needed to get the embedded JBoss server with RHQ server deployed running -->
      
      <dependency>
        <groupId>${project.groupId}</groupId>
        <artifactId>test-utils</artifactId>
        <version>${project.version}</version>
        <scope>test</scope>
      </dependency>
      
      <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>rhq-enterprise-server</artifactId>
          <version>${project.version}</version>
          <type>test-jar</type>
          <scope>test</scope>
      </dependency>  
       
      <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>rhq-enterprise-server</artifactId>
          <version>${project.version}</version>
          <scope>test</scope>
      </dependency>  
       
      <dependency>
          <groupId>${project.groupId}</groupId>
          <artifactId>rhq-container-lib</artifactId>
          <version>${project.version}</version>
          <scope>test</scope>
      </dependency>
      
      <dependency>
         <groupId>hibernate</groupId>
         <artifactId>hibernate3</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>hibernate-entitymanager</groupId>
         <artifactId>hibernate-entitymanager</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.apache.geronimo.specs</groupId>
         <artifactId>geronimo-javamail_1.3.1_spec</artifactId>
         <!-- The Sun javamail jar isn't available from a public repo due to licensing issues,
              so use the Geronimo one instead. -->
         <version>1.3</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>servlet-api</artifactId>
         <version>2.4</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>javax.servlet</groupId>
         <artifactId>jsp-api</artifactId>
         <version>2.0</version>
         <scope>test</scope>
      </dependency>

      
      <dependency>
         <groupId>org.opensymphony.quartz</groupId>
         <artifactId>quartz</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.opensymphony.quartz</groupId>
         <artifactId>quartz-oracle</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-annotations-ejb3</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-cache</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-common</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <!-- includes the org.jboss.ejb3.StrictMaxPool class, which is needed by the PoolClass annotation used on some
           of our SLSB's -->
      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-ejb3</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-j2ee</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-jmx</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jboss-system</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jbosssx</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>jboss</groupId>
         <artifactId>jbpm</artifactId>
         <version>3.1.1</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>antlr</groupId>
         <artifactId>antlr</artifactId>
         <version>2.7.7</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>javassist</groupId>
         <artifactId>javassist</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>trove</groupId>
         <artifactId>trove</artifactId>
         <version>1.0.2</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>xerces</groupId>
         <artifactId>xercesImpl</artifactId>
         <version>2.8.1</version>
         <scope>test</scope>
      </dependency>

       <dependency>
           <groupId>net.sf.opencsv</groupId>
           <artifactId>opencsv</artifactId>
           <version>1.8</version>
           <scope>test</scope>
       </dependency>

       <dependency>
           <groupId>commons-jxpath</groupId>
           <artifactId>commons-jxpath</artifactId>
           <version>1.3</version>
           <scope>test</scope>
       </dependency>

      <!-- for the transaction interrupt EJB3 interceptor -->
      <dependency>
         <groupId>org.jboss.transaction</groupId>
         <artifactId>jboss-jta</artifactId>
         <!-- NOTE: The version is defined in the root POM's dependencyManagement section. -->
         <scope>test</scope>
      </dependency> 
      
      <dependency>
         <groupId>tomcat</groupId>
         <artifactId>catalina</artifactId>
         <version>5.5.20</version>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>tomcat</groupId>
         <artifactId>tomcat-jk</artifactId>
         <version>4.1.31</version>
         <scope>test</scope>
      </dependency>

      <!-- Needed by com.jboss.jbossnetwork.apl.actions.xml.XPathProcessor; TODO: Remove once APL has been excised. -->
      <dependency>
         <groupId>xalan</groupId>
         <artifactId>xalan</artifactId>
         <version>2.5.1</version>
         <scope>test</scope>
      </dependency>

       <dependency>
           <groupId>com.jcraft</groupId>
           <artifactId>jsch</artifactId>
           <version>0.1.29</version>
           <scope>test</scope>
       </dependency>

       <dependency>
           <groupId>org.jboss.resteasy</groupId>
           <artifactId>resteasy-jaxrs</artifactId>
           <version>${resteasy.version}</version>
           <scope>test</scope>
       </dependency>
       <dependency>
           <groupId>org.jboss.resteasy</groupId>
           <artifactId>resteasy-jettison-provider</artifactId>
           <version>${resteasy.version}</version>
           <scope>test</scope>
       </dependency>
       <dependency>
           <groupId>org.jboss.resteasy</groupId>
           <artifactId>resteasy-links</artifactId>
           <version>${resteasy.version}</version>
           <scope>test</scope>
       </dependency>
       <dependency>
           <groupId>org.jboss.el</groupId>
           <artifactId>jboss-el</artifactId>
           <version>2.0.1.GA</version>
           <scope>test</scope>
       </dependency>
       <dependency>
           <groupId>org.freemarker</groupId>
           <artifactId>freemarker</artifactId>
           <version>2.3.18</version>
           <scope>test</scope>
       </dependency>
                
    </dependencies>

    <build>
      <testResources>
         <testResource>
            <directory>src/test/resources</directory>
            <filtering>true</filtering>
         </testResource>
      </testResources>

        <plugins>

             <plugin>
               <artifactId>maven-surefire-plugin</artifactId>
                <!-- Everything but the web service tests, this is the standard test execution -->
               <configuration>
                   <excludedGroups>${rhq.testng.excludedGroups}</excludedGroups>
                   <groups>${rhq.testng.includedGroups}</groups>
                   <systemPropertyVariables>
                      <embeddedDeployment>true</embeddedDeployment>
                      <deploymentDirectory>target/test-classes</deploymentDirectory>
                      <hibernate.dialect>${rhq.test.ds.hibernate-dialect}</hibernate.dialect>
                      <clean.db>${clean.db}</clean.db>
                   </systemPropertyVariables>
                   <argLine>-Djava.security.manager -Djava.security.policy==target/test-classes/security.policy</argLine>
                   <additionalClasspathElements>
                      <!-- The below is required for tests to run against Oracle. -->
                      <additionalClasspathElement>${settings.localRepository}/com/oracle/ojdbc5/${ojdbc5.version}/ojdbc5-${ojdbc5.version}.jar</additionalClasspathElement>
                   </additionalClasspathElements>
                </configuration>
             </plugin>

         <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>

               <!--  in order to get JMS to work properly in embedded test container, extract jms-rs.rar classes -->
               <execution>
                  <id>Extract JMS classes from RAR needed for JMS tests</id>
                  <phase>process-classes</phase>
                  <configuration>
                     <tasks>
                        <unzip src="src/test/resources/jms-ra.rar" dest="target">
                           <patternset>
                              <include name="jms-ra.jar"/>
                           </patternset>
                        </unzip>
                        <unzip src="target/jms-ra.jar" dest="target/test-classes">
                           <patternset>
                              <include name="org/**"/>
                           </patternset>
                        </unzip>
                     </tasks>
                  </configuration>
                  <goals>
                     <goal>run</goal>
                  </goals>
               </execution>

            </executions>
         </plugin>
        </plugins>
    </build>

    <profiles>

        <profile>
            <id>dev</id>

            <properties>
                <rhq.rootDir>../../..</rhq.rootDir>
                <rhq.containerDir>${rhq.rootDir}/${rhq.defaultDevContainerPath}</rhq.containerDir>
                <rhq.deploymentDir>${rhq.containerDir}/jbossas/server/default/deploy/${rhq.earName}/lib</rhq.deploymentDir>
            </properties>

            <build>
                <plugins>

                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.1</version>
                        <executions>

                            <execution>
                                <id>deploy</id>
                                <phase>compile</phase>
                                <configuration>
                                    <tasks>
                                        <mkdir dir="${rhq.deploymentDir}" />
                                        <property name="deployment.file" location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
                                        <echo>*** Updating
                                            ${deployment.file}...</echo>
                                        <jar destfile="${deployment.file}" basedir="${project.build.outputDirectory}" />
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                            <execution>
                                <id>undeploy</id>
                                <phase>clean</phase>
                                <configuration>
                                    <tasks>
                                        <property name="deployment.file" location="${rhq.deploymentDir}/${project.build.finalName}.jar" />
                                        <echo>*** Deleting
                                            ${deployment.file}...</echo>
                                        <delete file="${deployment.file}" />
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>

                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

        <profile>
            <id>cobertura-plugins</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>net.sourceforge.cobertura</groupId>
                                <artifactId>cobertura</artifactId>
                                <version>1.9.4.1</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>cobertura-instrument</id>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <tasks>
                                        <!-- prepare directory structure 
                                            for cobertura -->
                                        <mkdir dir="target/cobertura" />
                                        <mkdir dir="target/cobertura/backup" />
                                        <!-- backup all classes so that we 
                                            can instrument the original classes -->
                                        <copy toDir="target/cobertura/backup" verbose="true" overwrite="true">
                                            <fileset dir="target/classes">
                                                <include name="**/*.class" />
                                            </fileset>
                                        </copy>
                                        <!-- create a properties file and 
                                            save there location of cobertura data file -->
                                        <touch file="target/classes/cobertura.properties" />
                                        <echo file="target/classes/cobertura.properties">net.sourceforge.cobertura.datafile=${project.build.directory}/cobertura/cobertura.ser</echo>
                                        <taskdef classpathref="maven.plugin.classpath" resource="tasks.properties" />
                                        <!-- instrument all classes in target/classes 
                                            directory -->
                                        <cobertura-instrument datafile="${project.build.directory}/cobertura/cobertura.ser" todir="${project.build.directory}/classes">
                                            <fileset dir="${project.build.directory}/classes">
                                                <include name="**/*.class" />
                                            </fileset>
                                        </cobertura-instrument>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>cobertura-report</id>
                                <phase>post-integration-test</phase>
                                <configuration>
                                    <tasks>
                                        <taskdef classpathref="maven.plugin.classpath" resource="tasks.properties" />
                                        <!-- prepare directory structure 
                                            for cobertura -->
                                        <mkdir dir="target/cobertura" />
                                        <mkdir dir="target/site/cobertura" />
                                        <!-- restore classes from backup 
                                            folder to classes folder -->
                                        <copy toDir="target/classes" verbose="true" overwrite="true">
                                            <fileset dir="target/cobertura/backup">
                                                <include name="**/*.class" />
                                            </fileset>
                                        </copy>
                                        <!-- delete backup folder -->
                                        <delete dir="target/cobertura/backup" />
                                        <!-- create a code coverage report -->
                                        <cobertura-report format="html" datafile="${project.build.directory}/cobertura/cobertura.ser" destdir="${project.build.directory}/site/cobertura">
                                            <fileset dir="${basedir}/src/main/java">
                                                <include name="**/*.java" />
                                            </fileset>
                                        </cobertura-report>
                                        <!-- delete cobertura.properties 
                                            file -->
                                        <delete file="target/classes/cobertura.properties" />
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>

