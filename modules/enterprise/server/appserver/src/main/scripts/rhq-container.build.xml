<?xml version="1.0"?>

<project name="rhq-appserver-container" basedir=".">

    <property name="default.rhq.server.database.hibernate-dialect" value="org.hibernate.dialect.PostgreSQLDialect" />
    <property name="default.rhq.server.database.connection-url"    value="jdbc:postgresql://127.0.0.1:5432/rhq" />
    <property name="default.rhq.server.database.user-name"          value="rhqadmin" />
    <property name="default.rhq.server.database.password"           value="rhqadmin" />
    <property name="default.rhq.server.database.password.encrypted" value="1eeb2f255e832171df8592078de921bc" />
    <property name="default.rhq.server.database.type-mapping"       value="PostgreSQL" />

    <!-- these are needed for the PostgreSQL XADataSource setup -->
    <property name="default.rhq.server.database.server-name"        value="127.0.0.1" />
    <property name="default.rhq.server.database.port"               value="5432" />
    <property name="default.rhq.server.database.db-name"            value="rhq" />
    <property name="default.rhq.server.quartz.driverDelegateClass"  value="org.quartz.impl.jdbcjobstore.PostgreSQLDelegate" />
    <property name="default.rhq.server.quartz.selectWithLockSQL"    value="SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE" />
    <property name="default.rhq.server.quartz.lockHandlerClass"     value="org.quartz.impl.jdbcjobstore.StdRowLockSemaphore" />

    <property name="rhq.sync.endpoint-address" value="false"/>

    <property name="default.rhq.server.drift.binary.content" value="false"/>

    <target name="set-predeploy-prop">
        <condition property="predeploy" value="true">
            <or>
                <equals arg1="${dev.profile.active}" arg2="true" />
                <equals arg1="${developer}" arg2="true" />
            </or>
        </condition>
    </target>

    <target name="set-dev-server-props" if="predeploy">
        <echo>*** Using dev database settings in rhq-server.properties...</echo>
        <property name="rhq.server.database.hibernate-dialect" value="${rhq.dev.ds.hibernate-dialect}" />
        <property name="rhq.server.database.connection-url"    value="${rhq.dev.ds.connection-url}" />
        <property name="rhq.server.database.user-name"         value="${rhq.dev.ds.user-name}" />
        <property name="rhq.server.database.password"          value="${rhq.dev.ds.password.encrypted}" />
        <property name="rhq.server.database.type-mapping"      value="${rhq.dev.ds.type-mapping}" />
        <property name="rhq.server.database.server-name"       value="${rhq.dev.ds.server-name}" />
        <property name="rhq.server.database.port"              value="${rhq.dev.ds.port}" />
        <property name="rhq.server.database.db-name"           value="${rhq.dev.ds.db-name}" />
        <property name="rhq.server.quartz.driverDelegateClass" value="${rhq.dev.quartz.driverDelegateClass}" />
        <property name="rhq.server.quartz.selectWithLockSQL"   value="${rhq.dev.quartz.selectWithLockSQL}" />
        <property name="rhq.server.quartz.lockHandlerClass"    value="${rhq.dev.quartz.lockHandlerClass}" />
        <property name="rhq.server.drift.store-binary-content" value="${default.rhq.server.drift.binary.content}"/>
    </target>

    <target name="set-default-server-props" unless="predeploy">
        <echo>*** Using default database settings in rhq-server.properties...</echo>
        <property name="rhq.server.database.hibernate-dialect" value="${default.rhq.server.database.hibernate-dialect}" />
        <property name="rhq.server.database.connection-url"    value="${default.rhq.server.database.connection-url}" />
        <property name="rhq.server.database.user-name"         value="${default.rhq.server.database.user-name}" />
        <property name="rhq.server.database.password"          value="${default.rhq.server.database.password.encrypted}" />
        <property name="rhq.server.database.type-mapping"      value="${default.rhq.server.database.type-mapping}" />
        <property name="rhq.server.database.server-name"       value="${default.rhq.server.database.server-name}" />
        <property name="rhq.server.database.port"              value="${default.rhq.server.database.port}" />
        <property name="rhq.server.database.db-name"           value="${default.rhq.server.database.db-name}" />
        <property name="rhq.server.quartz.driverDelegateClass" value="${default.rhq.server.quartz.driverDelegateClass}" />
        <property name="rhq.server.quartz.selectWithLockSQL"   value="${default.rhq.server.quartz.selectWithLockSQL}" />
        <property name="rhq.server.quartz.lockHandlerClass"    value="${default.rhq.server.quartz.lockHandlerClass}" />
        <property name="rhq.server.drift.store-binary-content" value="${default.rhq.server.drift.binary.content}"/>
    </target>

    <target name="initialize" depends="set-predeploy-prop, set-dev-server-props, set-default-server-props">
        <echo>*** Database type is ${rhq.server.database.type-mapping}</echo>
        <property name="jboss.home" location="${project.build.outputDirectory}/jbossas" />

        <!-- TODO: if JBossAS has a marker file that we can check to see if server is running, we can use it here -->
        <!--
            <property name="marker.file" location="${jboss.home}/server/default/data/hypersonic/localDB.lck" />
            <fail message="The RHQ container appears to be currently running (${marker.file} exists). Please stop the container before rebuilding it in place.">
                <condition>
                    <available file="${marker.file}" />
                </condition>
            </fail>
        -->

        <property name="jboss.deploy.dir" location="${jboss.home}/standalone/deployments" />

        <condition property="use-postgres" value="true">
            <contains string="${rhq.server.database.type-mapping}" substring="postgres" casesensitive="false" />
        </condition>
        <condition property="use-oracle" value="true">
            <contains string="${rhq.server.database.type-mapping}" substring="oracle" casesensitive="false" />
        </condition>

        <condition property="copy.dev.resources" value="true">
            <or>
                <equals arg1="${dev.profile.active}" arg2="true" />
                <equals arg1="${developer}" arg2="true" />
            </or>
        </condition>

        <condition property="predeploy-postgres" value="true">
            <and>
                <equals arg1="${predeploy}" arg2="true" />
                <equals arg1="${use-postgres}" arg2="true" />
            </and>
        </condition>

        <condition property="predeploy-oracle" value="true">
            <and>
                <equals arg1="${predeploy}" arg2="true" />
                <equals arg1="${use-oracle}" arg2="true" />
            </and>
        </condition>

        <!-- developers might want to deploy agent/server plugins frequently, so we'll scan every 30 seconds -->
        <!-- in production, plugins change very infrequently, so only scan every 5 minutes -->
        <condition property="rhq.server.plugin-scan-period-ms" value="30000">
            <or>
                <equals arg1="${dev.profile.active}" arg2="true" />
                <equals arg1="${developer}" arg2="true" />
            </or>
        </condition>
        <condition property="rhq.server.plugin-scan-period-ms" value="300000">
            <not>
                <or>
                    <equals arg1="${dev.profile.active}" arg2="true" />
                    <equals arg1="${developer}" arg2="true" />
                </or>
            </not>
        </condition>

    </target>

    <target name="prepare-container"
            depends="prepare-jbossas-dir,
                     prepare-bin-dir" />

    <target name="prepare-jbossas-dir"
            depends="initialize"
            description="prepare JBossAS for hosting the RHQ Server">

        <echo>*** Preparing jbossas dir ***</echo>

        <echo>Unzipping vanilla JBoss dist zipfile found at ${jboss.zip}</echo>
        <condition property="jboss.uptodate">
            <and>
                <uptodate srcfile="${jboss.zip}" targetfile="${jboss.home}" />
                <available file="${jboss.home}/jboss-modules.jar" type="file" />
            </and>
        </condition>

        <antcall target="unzip-jboss" />

        <echo>Checking that we have a valid JBossAS distribution...</echo>
        <available file="${jboss.home}/jboss-modules.jar" type="file" property="jboss.home.is.valid" />
        <fail unless="jboss.home.is.valid" message="${jboss.home} does not contain a valid JBossAS installation - aborting!" />

        <!-- TODO: THESE WERE NEEDED IN THE OLD 4.2.3 CONTAINER - WE SHOULD BE ABLE TO DELETE THESE
        <echo>Installing patched hibernate jar ...</echo>
        <copy file="${settings.localRepository}/hibernate/hibernate3/${hibernate3.version}/hibernate3-${hibernate3.version}.jar"
              tofile="${jboss.home}/server/default/lib/hibernate3.jar" verbose="true"/>

        <echo>Installing custom container library...</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-container-lib/${rhq.version}/rhq-container-lib-${rhq.version}.jar"
              tofile="${jboss.home}/server/default/lib/rhq-container-lib-${rhq.version}.jar" verbose="true"/>
        -->

        <property name="jboss.modules.dir" location="${jboss.home}/modules" />
        <echo>Adding JDBC modules to ${jboss.modules.dir} ...</echo>
        <copy file="${settings.localRepository}/com/oracle/ojdbc6/${ojdbc6.version}/ojdbc6-${ojdbc6.version}.jar"
              toDir="${jboss.modules.dir}/org/rhq/oracle/main" failonerror="false" verbose="true" />
        <echo file="${jboss.modules.dir}/org/rhq/oracle/main/module.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="org.rhq.oracle">
    <resources>
        <resource-root path="ojdbc6-${ojdbc6.version}.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
]]></echo>
        <copy file="${settings.localRepository}/postgresql/postgresql/${postgresql.version}/postgresql-${postgresql.version}.jar"
              toDir="${jboss.modules.dir}/org/rhq/postgres/main" verbose="true" />
        <echo file="${jboss.modules.dir}/org/rhq/postgres/main/module.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<module xmlns="urn:jboss:module:1.1" name="org.rhq.postgres">
    <resources>
        <resource-root path="postgresql-${postgresql.version}.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
]]></echo>

        <echo>Generate SSL key for RHQ server - 128-bit key that expires in 20 years</echo>
        <property name="jboss.conf.dir" location="${jboss.home}/standalone/configuration" />
        <available file="${jboss.conf.dir}/rhq.keystore" type="file" property="rhq.keystore.exists" />
        <antcall target="generate-rhq-ssl-key" />

        <echo>Delete the various working directories if they happen to exist</echo>
        <delete dir="${jboss.home}/standalone/data" />
        <delete dir="${jboss.home}/standalone/log" />
        <delete dir="${jboss.home}/standalone/tmp" />
        <delete dir="${jboss.home}/standalone/work" /> <!-- TODO: does AS7 still have this? -->

        <!-- TODO: we need to put Quartz in the ear and deploy a scheduler sar -->
        <!--
        <echo>Upgrading Quartz to v${quartz.version} ...</echo>
        <copy file="${settings.localRepository}/org/opensymphony/quartz/quartz/${quartz.version}/quartz-${quartz.version}.jar"
              tofile="${jboss.home}/server/default/lib/quartz.jar" overwrite="true" verbose="true" />
        <copy file="${settings.localRepository}/org/opensymphony/quartz/quartz-oracle/${quartz.version}/quartz-oracle-${quartz.version}.jar"
              tofile="${jboss.home}/server/default/lib/quartz-oracle.jar" overwrite="true" verbose="true" />
        -->

        <echo>Deploying ${rhq.earName} ...</echo>
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}" />
        <unjar src="${settings.localRepository}/org/rhq/rhq-enterprise-server-ear/${rhq.version}/rhq-enterprise-server-ear-${rhq.version}.ear"
               dest="${jboss.deploy.dir}/${rhq.earName}" />

        <echo>Deploying installer webapp ...</echo>
        <mkdir dir="${jboss.deploy.dir}/rhq-installer.war" />
        <unwar src="${settings.localRepository}/org/rhq/rhq-installer/${rhq.version}/rhq-installer-${rhq.version}.war"
               dest="${jboss.deploy.dir}/rhq-installer.war" />

        <!-- TODO: deploy embedded agent sar -->
        <!--
        <echo>Deploying embedded agent sar ...</echo>
        <mkdir dir="${jboss.deploy.dir}/rhq-agent.sar" />
        <unjar src="${settings.localRepository}/org/rhq/rhq-enterprise-server-agent-sar/${rhq.version}/rhq-enterprise-server-agent-sar-${rhq.version}.sar"
               dest="${jboss.deploy.dir}/rhq-agent.sar" />
        -->

        <echo>Delete docs, README, et. al. files</echo>
        <delete dir="${jboss.home}/docs/examples" />
        <delete>
            <fileset dir="${jboss.home}" includes="*.txt" />
        </delete>

        <echo>Delete domain files - we only start in standalone mode</echo>
        <delete dir="${jboss.home}/domain" />

        <!-- TODO: setup our own welcome-content that points to our app -->
        <!--
        <echo>Setup welcome content</echo>
        <delete dir="${jboss.home}/welcome-content" />
        -->

        <echo>Make sure the top level downloads directory exists</echo>
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads" />

        <echo>Deploying static downloadable content</echo>
        <copy todir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads" 
              verbose="true"
              failonerror="false">
            <fileset dir="${basedir}/src/main/downloadable-resources" />
        </copy>
      
        <echo>Make sure our downloads directories exist</echo>
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/rhq-agent" />
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/rhq-client" />
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/rhq-plugins" />
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/connectors" />
        <mkdir dir="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/bundle-deployer" />

        <echo>Deploying the latest agent update binary and renaming it rhq-enterprise-agent-${rhq.version}.jar</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-enterprise-agentupdate/${rhq.version}/rhq-enterprise-agentupdate-${rhq.version}.jar"
              tofile="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/rhq-agent/rhq-enterprise-agent-${rhq.version}.jar"
              verbose="true"
              failonerror="true"/>

        <echo>Deploying the latest remote client binary</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-remoting-cli/${rhq.version}/rhq-remoting-cli-${rhq.version}.zip"
              tofile="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/rhq-client/rhq-remoting-cli-${rhq.version}.zip"
              verbose="true"
              failonerror="false"/>

        <echo>Deploying the latest command-line bundle deployer to the downloads location</echo>
        <copy file="${settings.localRepository}/org/rhq/rhq-ant-bundle-common/${rhq.version}/rhq-ant-bundle-common-${rhq.version}.zip"
              tofile="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/bundle-deployer/rhq-bundle-deployer-${rhq.version}.zip"
              verbose="true"
              failonerror="false"/>

        <antcall target="package-connectors" />
        <echo>Deploying RT filter jar ...</echo>
        <unzip src="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter/${project.version}/rhq-rtfilter-${project.version}.zip" 
               dest="${jboss.home}/modules" />

        <unzip src="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter-subsystem/${project.version}/rhq-rtfilter-subsystem-${project.version}.zip" 
               dest="${jboss.home}/modules" />
        <!-- TODO: it is up to either the installer or our EAR's WAR to use this so JON itself can have its RT data collected -->

    </target>

    <target name="package-connectors">
        <echo>Deploying the response-time (RT) servlet filter connectors ...</echo>
        <delete file="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/connectors/connector-rtfilter.zip" />
        <zip destfile="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/connectors/connector-rtfilter.zip">
            <zipfileset dir="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter/${project.version}">
                <include name="rhq-rtfilter-${project.version}.jar" />
            </zipfileset>
            <zipfileset dir="${settings.localRepository}/commons-logging/commons-logging/1.1.1">
                <include name="commons-logging-1.1.1.jar" />
            </zipfileset>
        </zip>

        <!-- rtfilter AS7 modules -->
        <copy file="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter/${project.version}/rhq-rtfilter-${project.version}.zip" 
              tofile="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/connectors/rhq-rtfilter-module.zip" />

        <copy file="${settings.localRepository}/org/rhq/helpers/rhq-rtfilter-subsystem/${project.version}/rhq-rtfilter-subsystem-${project.version}.zip" 
              tofile="${jboss.deploy.dir}/${rhq.earName}/rhq-downloads/connectors/rhq-rtfilter-subsystem-module.zip" />
    </target>

    <target name="prepare-bin-dir">
        <echo>*** Preparing bin dir ***</echo>
        <echo>Connection URL is ${rhq.server.database.connection-url}</echo>

        <property name="rhq.bin.dir" location="${project.build.outputDirectory}/bin" />
        <mkdir dir="${rhq.bin.dir}" />
        <echo file="${rhq.bin.dir}/rhq-server.properties">### RHQ Server Configuration Properties

# Database
rhq.server.database.connection-url=${rhq.server.database.connection-url}
rhq.server.database.user-name=${rhq.server.database.user-name}
rhq.server.database.password=${rhq.server.database.password}
rhq.server.database.type-mapping=${rhq.server.database.type-mapping}
rhq.server.database.server-name=${rhq.server.database.server-name}
rhq.server.database.port=${rhq.server.database.port}
rhq.server.database.db-name=${rhq.server.database.db-name}
hibernate.dialect=${rhq.server.database.hibernate-dialect}

# Quartz
rhq.server.quartz.driverDelegateClass=${rhq.server.quartz.driverDelegateClass}
rhq.server.quartz.selectWithLockSQL=${rhq.server.quartz.selectWithLockSQL}
rhq.server.quartz.lockHandlerClass=${rhq.server.quartz.lockHandlerClass}

# Container configuration
# ********************************** NOTE ************************************
# If the jboss.bind.address property is set to anything besides 0.0.0.0,
# uncomment the java.rmi.server.hostname property below and set it to the same
# value - setting it to ${jboss.bind.address} will *not* work.
jboss.bind.address=0.0.0.0
#java.rmi.server.hostname=0.0.0.0

# High Availability (HA)
rhq.server.high-availability.name=
rhq.server.maintenance-mode-at-startup=false

# General Properties
rhq.server.startup.web.http.port=${rhq.server.http.port}
rhq.server.startup.web.https.port=${rhq.server.https.port}
rhq.server.startup.webservice.port=9093
rhq.server.startup.namingservice.port=2099
rhq.server.startup.namingservice.rmiport=2098
rhq.server.startup.jrmpinvoker.rmiport=7444
rhq.server.startup.pooledinvoker.rmiport=7445
rhq.server.startup.ajp.port=9009
rhq.server.startup.unifiedinvoker.port=5446
rhq.server.startup.aspectdeployer.bind-port=4873

# The number of concurrent threads used to deploy plugins.
# Currently, it is not recommended to increase this value.
rhq.server.plugin-deployer-threads=1

# RHQ Server's remote endpoint for agents to talk to
# bind-address and bind-port are derived from the HA server definition,
# if you set the address/port here, they will override the HA server definition found in the database
rhq.communications.connector.transport=servlet
rhq.communications.connector.bind-address=
rhq.communications.connector.bind-port=
rhq.communications.connector.transport-params=/jboss-remoting-servlet-invoker/ServerInvokerServlet

# Multicast detector configuration for auto-discovery
rhq.communications.multicast-detector.enabled=false
rhq.communications.multicast-detector.bind-address=${jboss.bind.address}
rhq.communications.multicast-detector.multicast-address=224.16.16.16
rhq.communications.multicast-detector.port=16162

# Server-side SSL Security Configuration for HTTPS thru Tomcat
# These are used for browser https: access and for incoming messages from agents over sslservlet transport
# [you cannot use ${x} variables - see https://jira.jboss.org/jira/browse/JBWEB-74]
rhq.server.tomcat.security.client-auth-mode=want
rhq.server.tomcat.security.secure-socket-protocol=TLS
rhq.server.tomcat.security.algorithm=SunX509
rhq.server.tomcat.security.keystore.alias=RHQ
rhq.server.tomcat.security.keystore.file=conf/rhq.keystore
rhq.server.tomcat.security.keystore.password=RHQManagement
rhq.server.tomcat.security.keystore.type=JKS
rhq.server.tomcat.security.truststore.file=conf/rhq.truststore
rhq.server.tomcat.security.truststore.password=RHQManagement
rhq.server.tomcat.security.truststore.type=JKS

# Server-side SSL Security Configuration (for incoming messages from agents)
# These are used when secure transports other than sslservlet are used
rhq.communications.connector.security.secure-socket-protocol=TLS
rhq.communications.connector.security.keystore.file=${jboss.server.home.dir}/conf/rhq.keystore
rhq.communications.connector.security.keystore.algorithm=SunX509
rhq.communications.connector.security.keystore.type=JKS
rhq.communications.connector.security.keystore.password=RHQManagement
rhq.communications.connector.security.keystore.key-password=RHQManagement
rhq.communications.connector.security.keystore.alias=RHQ
rhq.communications.connector.security.truststore.file=${jboss.server.home.dir}/conf/rhq.truststore
rhq.communications.connector.security.truststore.algorithm=SunX509
rhq.communications.connector.security.truststore.type=JKS
rhq.communications.connector.security.truststore.password=RHQManagement
rhq.communications.connector.security.client-auth-mode=none

# Client-side SSL Security Configuration (for outgoing messages to agents)
rhq.server.client.security.secure-socket-protocol=TLS
rhq.server.client.security.keystore.file=${jboss.server.home.dir}/conf/rhq.keystore
rhq.server.client.security.keystore.algorithm=SunX509
rhq.server.client.security.keystore.type=JKS
rhq.server.client.security.keystore.password=RHQManagement
rhq.server.client.security.keystore.key-password=RHQManagement
rhq.server.client.security.keystore.alias=RHQ
rhq.server.client.security.truststore.file=${jboss.server.home.dir}/conf/rhq.truststore
rhq.server.client.security.truststore.algorithm=SunX509
rhq.server.client.security.truststore.type=JKS
rhq.server.client.security.truststore.password=RHQManagement
rhq.server.client.security.server-auth-mode-enabled=false

# Embedded RHQ Agent
rhq.server.embedded-agent.enabled=false
rhq.server.embedded-agent.name=
rhq.server.embedded-agent.reset-configuration=true
rhq.server.embedded-agent.disable-native-system=false

# Email
rhq.server.email.smtp-host=localhost
rhq.server.email.smtp-port=25
rhq.server.email.from-address=rhqadmin@localhost

# Operations/controls timeout
# Defines the default timeout for all operations (specified in seconds)
rhq.server.operation-timeout=600

# Concurrency limits for incoming UI and agent messages
rhq.server.startup.web.max-connections=200
rhq.server.agent-downloads-limit=45
rhq.server.client-downloads-limit=5
rhq.communications.global-concurrency-limit=30
rhq.server.concurrency-limit.inventory-report=5
rhq.server.concurrency-limit.availability-report=25
rhq.server.concurrency-limit.inventory-sync=10
rhq.server.concurrency-limit.content-report=5
rhq.server.concurrency-limit.content-download=5
rhq.server.concurrency-limit.measurement-report=10
rhq.server.concurrency-limit.measurement-schedule-request=10

# Content Local Filesystem Repository
rhq.server.content.filesystem=${jboss.server.data.dir}/packagebits

# The frequency (in millis) the server checks for updated plugins
rhq.server.plugin-scan-period-ms=${rhq.server.plugin-scan-period-ms}

# When this is enabled, the server at start up will compare its endpoint
# address to the host name/address found on the host machine. If they differ,
# the server endpoint address will be updated to the value found on the host
# machine. This is targeted for use in cloud deployments where IP addresses
# change frequently, but it can be of use in other deployment settings where
# you have to deal with IP address changes.
rhq.sync.endpoint-address=false

# When this is enabled, the server will request that agents send content for
# for binary files that are being monitored for drift. The content for those
# files will then be persisted on the server. By default, the server does not
# persist content for well known binary file types like .ear, .war, .zip, .so,
# etc. The server does however persist content for text files or any other
# files that are not known binary types.
# rhq.server.drift.store-binary-content=${rhq.server.drift.store-binary-content}

# Auto-Install Pre-Configuration Settings
# If you wish to circumvent the installer webapp and auto-install the server
# immediately upon first startup, make sure all of the settings above are
# correctly set for your server's deployment environment. Then make sure the
# following rhq.autoinstall properties are defined appropriately:
# rhq.autoinstall.enabled: must be true to trigger the automatic install
# rhq.autoinstall.database: allowed values: auto, overwrite, skip
#                           "auto" will create a new schema if one does not
#                           yet exist or, if a schema does exist, will simply
#                           upgrade it as needed (which keeps existing data).
#                           "overwrite" if you want to create an empty schema,
#                           even if one already exists (loses existing data).
#                           "skip" if you don't want to do any database
#                           upgrade or creation. WARNING! You must ensure your
#                           database schema already exists and is up to date.
# rhq.autoinstall.public-endpoint-address: public IP/hostname that all agents
#                                          will use to talk to this server.
#                                          If not set, a value to use is
#                                          determined at auto-install time.
rhq.autoinstall.enabled=false
rhq.autoinstall.database=auto
rhq.autoinstall.public-endpoint-address=

</echo>

    </target>

    <target name="unzip-jboss" unless="jboss.uptodate">
        <echo>Unzipping JBossAS ${jboss.version} found at ${jboss.zip}</echo>
        <unzip src="${jboss.zip}" dest="${basedir}/target" />
        <delete dir="${jboss.home}" />
        <move file="${basedir}/target/jboss-as-${jboss.version}" tofile="${jboss.home}" />
    </target>

    <target name="generate-rhq-ssl-key" unless="rhq.keystore.exists">
        <echo>Generating self-signed certificate in ${jboss.conf.dir} ...</echo>
        <genkey alias="RHQ"
                keystore="${jboss.conf.dir}/rhq.keystore"
                keyalg="rsa"
                storepass="RHQManagement"
                validity="7300"
                dname="CN=RHQ, OU=RHQ, O=rhq-project.org, C=US" />
        <!-- the rhq.truststore is pre-built and checked into git. It is empty with the same store pass as above -->
    </target>

    <target name="copy-dev-resources" if="copy.dev.resources">
        <echo>Copying dev-only resources ...</echo>
        <copy todir="${project.build.outputDirectory}" verbose="true">
            <fileset dir="src/main/dev-resources" />
        </copy>
        <echo>Putting a developer setting in rhq-server.properties to turn on/off strict agent update version checking</echo>
        <echo file="${project.build.outputDirectory}/bin/rhq-server.properties" append="true">rhq.server.agent-update.nonstrict-version-check=true</echo>
    </target>

    <!-- The prepare-release target must be run AFTER the resources:resources goal has executed. -->
    <!-- (i.e. after rhq-server.sh, etc. have been copied over by the resources plugin) -->

    <target name="prepare-release"
            description="If this is a release build, make sure it is properly prepared."
            depends="initialize,
                     fix-perms,
                     prepare-postinstaller-war,
                     developer-release-message,
                     copy-dev-resources,
                     deploy-postgres-ds,
                     deploy-oracle-ds,
                     undeploy-ear">

        <echo>Adding license files...</echo>
        <copy todir="${project.build.outputDirectory}">
            <fileset dir="${basedir}/../../../.." includes="LICENSE*" />
        </copy>
    </target>

    <target name="fix-perms">
        <!-- Make sure shell scripts are readable and executable. -->
        <chmod dir="${project.build.outputDirectory}/bin" includes="*.sh" perm="ug+x" verbose="true" />
        <chmod dir="${jboss.home}/bin" includes="*.sh" perm="ug+x" verbose="true" />
    </target>

    <target name="prepare-postinstaller-war">
        <!-- nothing to do here - leaving in case we need to perform things in the future -->
    </target>

    <target name="developer-release-message" if="predeploy">
        <echo>!!THIS IS A DEVELOPER CONTAINER BUILD - PRE-DEPLOYING RHQ SERVER!!</echo>
    </target>

    <!-- TODO: when we ship with an embedded agent -->
    <!--
    <target name="undeploy-embedded-agent" unless="predeploy">
        <echo>Preparing for release - undeploying Embedded Agent...</echo>
        <move file="${jboss.deploy.dir}/rhq-agent.sar" tofile="${jboss.deploy.dir}/rhq-agent.sar.skipdeploy" />
    </target>
    -->

    <target name="undeploy-ear" unless="predeploy">
        <echo>Preparing for release - telling AS to skip ear deployment</echo>
        <touch file="${jboss.deploy.dir}/${rhq.earName}.skipdeploy" />
    </target>

    <target name="deploy-postgres-ds" if="predeploy-postgres">
        <echo>Postgres will be your datasource backend!</echo>
    </target>

    <target name="deploy-oracle-ds" if="predeploy-oracle">
        <echo>Oracle will be your datasource backend!</echo>
    </target>

</project>

