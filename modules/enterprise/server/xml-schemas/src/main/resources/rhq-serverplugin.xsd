<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:config="urn:xmlns:rhq-configuration"
           xmlns:serverplugin="urn:xmlns:rhq-serverplugin"
           targetNamespace="urn:xmlns:rhq-serverplugin"
           elementFormDefault="qualified"
           jaxb:version="2.0"
           xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
           blockDefault="">

    <xs:import namespace="urn:xmlns:rhq-configuration" schemaLocation="rhq-configuration.xsd" />

    <xs:annotation>
        <xs:documentation>
            Schema for all server-side plugins. All server side plugin types
            will define their own schema that get embedded in this schema.
            Since there are only a strictly defined number of plugin types,
            each plugin type's schema will be explicitly included in this
            schema, under the plugin element's choice definition.
        </xs:documentation>
        <xs:appinfo>
            <jaxb:schemaBindings>
                <jaxb:package name="org.rhq.enterprise.server.xmlschema.generated.serverplugin" />
            </jaxb:schemaBindings>
        </xs:appinfo>
    </xs:annotation>

    <xs:element name="server-plugin" type="serverplugin:ServerPluginDescriptorType" abstract="true">
        <xs:annotation>
            <xs:documentation>
                Root element of a server-side plugin descriptor. All server side plugins
                will have this as their root element; however, child elements of this
                root element will be plugin-type-specific. Note this is an abstract element,
                it will actually be substituted with other elements of the concrete plugin types.
            </xs:documentation>
            <xs:appinfo>
                <jaxb:class name="ServerPluginElement" />
            </xs:appinfo>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="ServerPluginDescriptorType">
        <xs:sequence minOccurs="0" maxOccurs="1">
            <xs:element name="lifecycle-listener" minOccurs="0" maxOccurs="1" type="serverplugin:LifecycleListenerType">
                <xs:annotation>
                    <xs:documentation>
                        A class that performs global initialization and shutdown of the plugin. If specified,
                        this class will be notified when the plugin is loaded and unloaded. This provides a place
                        for plugin developers to allocate global resources needed by all plugin components and
                        a place to clean up those resources. It can also be scheduled to perform periodic work.
                        A lifecycle listener object is stateful - the instance lives for as long as the plugin
                        is initialized.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="scheduled-job" minOccurs="0" maxOccurs="unbounded" type="serverplugin:ScheduledJobType">
                <xs:annotation>
                    <xs:documentation>
                        A scheduled job that is called to periodically perform work on behalf of the plugin.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="plugin-configuration" minOccurs="0" maxOccurs="1" type="config:configuration">
                <xs:annotation>
                    <xs:documentation>
                        Plugin-wide configuration that can be useful to define the behavior of the plugin as
                        a whole. This is optional; only those plugins that require global configuration
                        will need to define plugin configuration.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" use="required">
            <xs:annotation>
                <xs:documentation>
                    Name of the plugin. This should be unique across all plugins deployed in the system.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:minLength value="1" />
                    <xs:maxLength value="200" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="displayName" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Formatted name displayed to the user. If this is omitted, the "name" attribute will be used.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="description" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Summary of what the plugin provides to be displayed to the user.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="package" type="serverplugin:classNameType" use="optional">
            <xs:annotation>
                <xs:documentation>
                    Package in which all component classes in this plugin reside. These component
                    classes may use classes in other packages, however non-qualified classnames
                    are assumed to be in this package.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="version" type="xs:string">
            <xs:annotation>
                <xs:documentation>
                    The version of this plugin in an OSGI compatible format. (e.g. 2.0.4 or 3.1.beta2)
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="apiVersion" type="xs:string">
            <xs:annotation>
                <xs:documentation>
                    The version of the server-side API this plugin requires in OSGI compatible format. (e.g. 2.0)
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="LifecycleListenerType">
        <xs:sequence>
            <xs:element name="schedule" minOccurs="0" maxOccurs="1" type="serverplugin:ScheduleType">
                <xs:annotation>
                    <xs:documentation>
                        A schedule that defines when and how often to invoke the plugin listener. This is optional; only
                        those plugins that need to do work periodically will define a schedule.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="class" type="serverplugin:classNameType" use="required">
                <xs:annotation>
                    <xs:documentation>
                        The class that will be instantiated. This is a stateful object, once initialized, the same
                        instance will be used to start, stop and shutdown the plugin.
                    </xs:documentation>
                </xs:annotation>
        </xs:attribute>    
    </xs:complexType>

    <xs:complexType name="ScheduleType">
        <xs:sequence minOccurs="0" maxOccurs="1">
            <xs:choice>
                <xs:element name="period" type="xs:long">
                    <xs:annotation>
                        <xs:documentation>
                            A time period, in milliseconds, that define how often the schedule will trigger.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="cron" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>
                            A "cron expression" which defines when the schedule should fire. A cron expression can be evaluated
                            to mean things such as: "At 8:00am every Monday through Friday" or "At 1:30am every last Friday of the month".
                            The cron expression syntax follows the rules defined by Quartz - see
                            http://www.opensymphony.com/quartz/api/org/quartz/CronExpression.html 
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="concurrent" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    If true, multiple invocations of the scheduled job are allowed to
                    occur at the same time. If false, only one invocation will ever run at any
                    one time. This means that if a schedule triggers again while the previous
                    scheduled invocation is still running, the second invocation will be delayed
                    until after the previous invocation completes. If there is more than one
                    RHQ Server in the system, and this is false, you can be assured that only
                    a single server will handle the invocation at any one time (i.e. multiple servers
                    will not run invocations at the same time).
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ScheduledJobType">
        <xs:complexContent>
            <xs:extension base="serverplugin:ScheduleType">
                <xs:attribute name="jobId" type="xs:string" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            A unique identifier for this job. Job IDs need to be unique
                            within a plugin. When the scheduled job is invoked, this job ID
                            will be passed to it.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="class" type="serverplugin:classNameType" use="required">
                    <xs:annotation>
                        <xs:documentation>
                            The classname of the ScheduledJob implementation that will be instantiated
                            whenever the schedule is triggered. This job instance will not be stateful,
                            a new instance of the class is created for each schedule trigger. Each job
                            invocation is handed a reference to the plugin's lifecycle listener (if one
                            was defined for the plugin), thus providing a way to obtain stateful
                            information from the plugin.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="classNameType">
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse" />
            <xs:minLength value="1" />
            <xs:maxLength value="500" />
            <xs:pattern value="[a-zA-Z_][a-zA-Z_0-9]*(.[a-zA-Z_][a-zA-Z_0-9]*)*" />
        </xs:restriction>
    </xs:simpleType>
</xs:schema>
