<?xml version="1.0" encoding="UTF-8"?>

<project name="rhq-client" basedir=".">

   <property name="bin.home" location="${project.build.outputDirectory}/bin" />
   <property name="cli.home" location="${project.build.outputDirectory}/cli" />
   <property name="conf.home" location="${project.build.outputDirectory}/conf" />
   <property name="jboss.home" location="${basedir}/target/jboss-${jboss.version}" />
   <property name="lib.home" location="${project.build.outputDirectory}/lib" />
   <property name="wsdl.home" location="${project.build.outputDirectory}/wsdl" />
   <property name="wsconsume.home" location="${project.build.outputDirectory}/wsconsume-output" />
   <property name="wsprovide.home" location="${project.build.outputDirectory}/wsprovide-output" />
   <!--
      <property name="jbossws.home" location="${project.build.outputDirectory}/jbossws-native-dist" />
   -->

   <target name="prepare-dist">
      <condition property="exclude.cli.jar" value="true">
         <equals arg1="${rhq.client.build.exclude.cli.jar}" arg2="true" />
      </condition>
      <condition property="include.client.jar" value="true">
         <equals arg1="${rhq.client.build.include.client.jar}" arg2="true" />
      </condition>

      <antcall target="prepare-jbossws" />
      <antcall target="prepare-bin-dir" />
      <antcall target="prepare-conf-dir" />
      <antcall target="prepare-lib-dir" />
      <antcall target="prepare-wsdl" />
      <antcall target="prepare-client-lib" />
      <antcall target="prepare-cli-lib" />
      
      <echo>*** Removing jbossws generated directories</echo>
      <delete dir="${wsconsume.home}" />
      <delete dir="${wsprovide.home}" />
      <delete dir="${cli.home}" />
   </target>

   <!--
      <target name="prepare-native-dir"> 
      <echo>*** Removing old native distribution</echo>
      <delete
      dir="${jbossws.home}" />
      <echo>*** Unzipping native distribution</echo>
      <unzip
      src="${settings.localRepository}/jboss/jbossws/${jbossws.version}/jbossws-${jbossws.version}.zip"
      dest="${project.build.outputDirectory}" />         
      </target>
   -->

   <!-- To generate the client service classes we need portions of an AS distribution that provide
	   jbossws.  Use a previous unzip if it is uptodate, in order to speed things up. -->
   <target name="prepare-jbossws">
      <property name="jboss.zip" location="${settings.localRepository}/org/jboss/jbossas/jboss-as-dist/${jboss.version}/jboss-as-dist-${jboss.version}.zip" />
      <condition property="jboss.uptodate">
         <and>
            <uptodate srcfile="${jboss.zip}" targetfile="${jboss.home}" />
            <available file="${jboss.home}/bin/wsprovide.bat" type="file" />
         </and>
      </condition>
      <antcall target="unzip-jboss" />
   </target>

   <target name="unzip-jboss" unless="jboss.uptodate">
      <unzip src="${settings.localRepository}/org/jboss/jbossas/jboss-as-dist/${jboss.version}/jboss-as-dist-${jboss.version}.zip" dest="${basedir}/target">
         <patternset>
            <include name="jboss-${jboss.version}/bin/ws*.*" />
            <include name="jboss-${jboss.version}/lib/*.jar" />
            <include name="jboss-${jboss.version}/lib/endorsed/*.jar" />
            <include name="jboss-${jboss.version}/client/*.jar" />
         </patternset>
      </unzip>
   </target>

   <target name="prepare-bin-dir">
      <echo>*** Removing old bin dir</echo>
      <delete dir="${bin.home}" />
      <echo>*** Creating bin dir</echo>
      <mkdir dir="${bin.home}" />
      <echo>*** Populating bin scripts</echo>
      <copy verbose="true" toDir="${bin.home}">
         <fileset dir="${basedir}/src/etc/" includes="rhq-cli*.*" />
      </copy>
   </target>

   <target name="prepare-conf-dir">
      <echo>*** Removing old conf dir</echo>
      <delete dir="${conf.home}" />
      <echo>*** Creating conf dir</echo>
      <mkdir dir="${conf.home}" />
      <echo>*** Populating conf files</echo>
      <copy verbose="true" toDir="${conf.home}">
         <fileset dir="${basedir}/src/main/resources/" includes="*.*" />
      </copy>
   </target>

   <target name="prepare-lib-dir">
      <echo>*** Removing old lib</echo>
      <delete dir="${lib.home}" />
      <echo>*** Creating lib dir</echo>
      <mkdir dir="${lib.home}" />
      <mkdir dir="${lib.home}/endorsed" />
      <echo>*** Populating lib</echo>
      <copy file="${settings.localRepository}/commons-logging/commons-logging/${commons-logging.version}/commons-logging-${commons-logging.version}.jar" tofile="${lib.home}/commons-logging-${commons-logging.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/gnu-getopt/getopt/${getopt.version}/getopt-${getopt.version}.jar" tofile="${lib.home}/getopt-${getopt.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/i18nlog/i18nlog/${i18nlog.version}/i18nlog-${i18nlog.version}.jar" tofile="${lib.home}/i18nlog-${i18nlog.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/jline/jline/${jline.version}/jline-${jline.version}.jar" tofile="${lib.home}/jline-${jline.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/log4j/log4j/${log4j.version}/log4j-${log4j.version}.jar" tofile="${lib.home}/log4j-${log4j.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/org/rhq/rhq-core-domain/${project.version}/rhq-core-domain-${project.version}.jar" tofile="${lib.home}/rhq-core-domain-${project.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/org/rhq/rhq-enterprise-server/${project.version}/rhq-enterprise-server-${project.version}.jar" tofile="${lib.home}/rhq-enterprise-server-${project.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/jboss/jboss-common/${jboss-common.version}/jboss-common-${jboss-common.version}.jar" tofile="${lib.home}/jboss-common-${jboss-common.version}.jar" verbose="true" />
      <copy file="${settings.localRepository}/jboss/jboss-remoting/${jboss-remoting.version}/jboss-remoting-${jboss-remoting.version}.jar" tofile="${lib.home}/jboss-remoting-${jboss-remoting.version}.jar" verbose="true" />     
      <copy file="${settings.localRepository}/oswego-concurrent/concurrent/${concurrent.version}/concurrent-${concurrent.version}.jar" tofile="${lib.home}/concurrent-${concurrent.version}.jar" verbose="true" />      
      <!-- TODO: This can probaby go away after we stop using EJB classes as Exceptions in the RemoteAPI -->
      <copy file="${settings.localRepository}/jboss/jboss-j2ee/${jboss.version}/jboss-j2ee-${jboss.version}.jar" tofile="${lib.home}/jboss-j2ee-${jboss.version}.jar" verbose="true" />
   </target>

   <target name="prepare-cli-lib" unless="exclude.cli.jar">
      <!-- CLI build classpath -->
      <path id="cli.classpath">
         <fileset dir="${lib.home}" includes="*.jar" />
         <pathelement path="${maven.compile.classpath}" />         
      </path>

      <echo>*** Removing old cli...</echo>
      <delete dir="${cli.home}" />
      <delete file="${lib.home}/rhq-cli-${project.version}.jar" />
      <echo>*** Creating new cli jar...</echo>
      <mkdir dir="${cli.home}/classes" />
      <javac srcdir="${basedir}/src/main/java" destdir="${cli.home}/classes" classpathref="cli.classpath" fork="true" executable="${java.jre.home}/../bin/javac" debug="true" debuglevel="lines, vars, and source"/>
      <jar destfile="${lib.home}/rhq-cli-${project.version}.jar" basedir="${cli.home}/classes" includes="org/rhq/**">
         <manifest>
            <attribute name="Specification-Title" value="JBossWS" />
            <attribute name="Specification-Version" value="${jbossws.version}" />
            <attribute name="Implementation-Title" value="${project.name}" />
            <attribute name="Implementation-Version" value="${project.version}" />
            <attribute name="Implementation-Vendor-Id" value="${project.groupId}" />
            <attribute name="Build-Number" value="${buildNumber}" />
         </manifest>
      </jar>
   </target>

   <target name="prepare-wsdl">
      <echo>*** Removing old wsdl</echo>
      <delete dir="${wsdl.home}" />
      <echo>*** Creating new wsdl</echo>
      <mkdir dir="${wsconsume.home}" />
      <mkdir dir="${wsprovide.home}" />

      <!--  This classpath basically provides the environment the wsprovide script creates.  So,it's
         JBossws version specific (and assumes compatibility between JBossws and AS -->
      <path id="jbossws.native.classpath">
         <!-- java dependencies -->
         <fileset dir="${java.jre.home}/../lib/" includes="*.jar" />

         <!-- AS dependencies  -->
         <fileset dir="${jboss.home}/lib/endorsed/" includes="*.jar" />
         <fileset dir="${jboss.home}/lib/" includes="*.jar" />

         <!-- JBossws/AS client dependencies  -->
         <fileset dir="${jboss.home}/client">
            <include name="activation.jar" />
            <include name="getopt.jar" />
            <include name="jbossall-client.jar" />
            <include name="jbossws-client.jar" />
            <include name="log4j.jar" />
            <include name="mail.jar" />
            <include name="jaxb-api.jar" />
            <include name="jaxb-impl.jar" />
            <include name="jaxb-xjc.jar" />
            <include name="jaxws-tools.jar" />
            <include name="jaxws-rt.jar" />
            <include name="streambuffer.jar" />
            <include name="stax-ex.jar" />
            <include name="javassist.jar" />
            <include name="jboss-xml-binding.jar" />
            <include name="jboss-jaxws.jar" />
            <include name="jboss-jaxrpc.jar" />
            <include name="jboss-saaj.jar" />
            <include name="policy.jar" />
            <include name="wsdl4j.jar" />
         </fileset>

         <!-- Oddball dependency that seems needed but missing -->
         <fileset dir="${settings.localRepository}/javax/persistence/persistence-api/${persistence-api.version}/">
            <include name="persistence-api-${persistence-api.version}.jar" />
         </fileset>

         <!--  Add support for wsconsume -->
         <fileset dir="${jboss.home}/client">
            <include name="wstx.jar" />
            <include name="stax-api.jar" />
            <include name="stax-ex.jar" />
         </fileset>
      </path>

      <echo>*** Providing ChannelManagerRemote wsdl...</echo>
      <taskdef name="wsprovide" classname="org.jboss.wsf.spi.tools.ant.WSProvideTask" classpathref="jbossws.native.classpath" />
      <taskdef name="wsconsume" classname="org.jboss.wsf.spi.tools.ant.WSConsumeTask" classpathref="jbossws.native.classpath" />

      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.content.ChannelManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ConfigurationManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.configuration.ConfigurationManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ContentManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.content.ContentManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing OperationManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.operation.OperationManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing ResourceManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.resource.ResourceManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing RoleManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.authz.RoleManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Providing SubjectManagerRemote wsdl...</echo>
      <wsprovide fork="true" destdir="${wsprovide.home}" resourcedestdir="${wsdl.home}" genwsdl="true" sei="org.rhq.enterprise.server.auth.SubjectManagerBean">
         <classpath>
            <pathelement path="${maven.runtime.classpath}" />
         </classpath>
      </wsprovide>

      <echo>*** Consuming ChannelManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ChannelManagerBeanService.wsdl" />

      <echo>*** Consuming ContentManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ContentManagerBeanService.wsdl" />

      <echo>*** Consuming ConfigurationManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ConfigurationManagerBeanService.wsdl" />

      <echo>*** Consuming OperationManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/OperationManagerBeanService.wsdl" />

      <echo>*** Consuming ResourceManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/ResourceManagerBeanService.wsdl" />

      <echo>*** Consuming RoleManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/RoleManagerBeanService.wsdl" />

      <echo>*** Consuming SubjectManagerRemote wsdl...</echo>
      <wsconsume fork="true" package="org.rhq.enterprise.server.ws" destdir="${wsconsume.home}" wsdl="${wsdl.home}/SubjectManagerBeanService.wsdl" />
   </target>

   <target name="prepare-client-lib" if="include.client.jar">
      <echo>*** Removing old client jar...</echo>
      <delete file="${lib.home}/rhq-client-${project.version}.jar" />
      <echo>*** Creating new client jar...</echo>
      <jar destfile="${lib.home}/rhq-client-${project.version}.jar" basedir="${wsconsume.home}" includes="org/rhq/**">
         <manifest>
            <attribute name="Specification-Title" value="JBossWS" />
            <attribute name="Specification-Version" value="${jbossws.version}" />
            <attribute name="Implementation-Title" value="${project.name}" />
            <attribute name="Implementation-Version" value="${project.version}" />
            <attribute name="Implementation-Vendor-Id" value="${project.groupId}" />
            <attribute name="Build-Number" value="${buildNumber}" />
         </manifest>
      </jar>
   </target>

   <target name="prepare-tests">
      <echo>*** Building test classes...</echo>
      <!-- CLI build classpath -->
      <path id="test.classpath">
         <fileset dir="${lib.home}" includes="*.jar" />
         <pathelement path="${maven.test.classpath}" />
      </path>
      <mkdir dir="${basedir}/target/test-classes" />
      <javac srcdir="${basedir}/src/test/java" destdir="${basedir}/target/test-classes" classpathref="test.classpath" fork="true" executable="${java.jre.home}/../bin/javac" excludes="**/ClientMainTest.java" debug="true" debuglevel="lines, vars, and source" />
   </target>

</project>
