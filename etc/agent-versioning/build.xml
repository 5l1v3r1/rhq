<?xml version="1.0" encoding="UTF-8"?>

<!--
This ANT script is used to test the agent auto-update functionality.

This takes an agent's core jar file that contains the version information
and alters it to make it look like its a different version/build than it
really use. Use this to change the version and/or build strings so the
server will think the agent is out of date and needs to be updated.

To configure this script, you must tell the script where the agent's
home directory is. You do this by either setting the normal
RHQ_AGENT_HOME environment variable or you pass in -Dagent.home.dir
on the ANT command line. You can also tell this script what the new
version and build strings should be used by passing in the command
line arguments -Dnew.version and/or -Dnew.build.

The typical usage of this script that you will normally use is:

ant -Dagent.home.dir=/my/agent/rhq-agent

Which simply resets the version to 0.0.0.GA and the build number to 0.

This is another usage (this shows all command line args being used):

ant -Dagent.home.dir=/my/agent/rhq-agent -Dnew.version=0.0.0.GA -Dnew.build=0

===

This script can alternatively take an agent update binary jar file
found on a server that contains the version information
and alters it to make it look like its a different version/build than it
really is. Use this to change the version and/or build strings so the
agents will think they are out of date and need to be updated.

To configure this script, you must tell the script where the agent
binary update is. You do this by either setting the normal
RHQ_SERVER_HOME environment variable or you pass in -Dserver.home.dir
on the ANT command line. You can also tell this script what the new
version and build strings should be used by passing in the command
line arguments -Dnew.version and/or -Dnew.build.

The typical usage of this script that you will normally use is:

ant -Dserver.home.dir=/my/server

Which simply resets the version to 0.0.0.GA and the build number to 0.

This is another usage (this shows all command line args being used):

ant -Dserver.home.dir=/my/server/rhq-agent -Dnew.version=0.0.0.GA -Dnew.build=0

-->
<project name="agent-versioning" default="help" basedir=".">

   <property environment="env" />

   <!-- set some defaults, but the user can override these via -D command line args -->
   <property name="new.version" value="0.0.0.GA" />
   <property name="new.build" value="0" />
   <echo>New Version To Be Used=${new.version}</echo>
   <echo>New Build To Be Used=${new.build}</echo>

   <target name="help">
      <echo>Use one of these two targets: stamp-agent, stamp-server</echo>
   </target>
   
   <!-- ========== AGENT STAMPING ========== -->

   <target name="init-agent">
      <property name="env.RHQ_AGENT_HOME" location="rhq-agent"/>
      <property name="agent.home.dir" location="${env.RHQ_AGENT_HOME}"/>
   </target>

   <target name="stamp-agent" depends="init-agent" description="Stamps a new version on an agent. The following system properties can be passed on the command line: -Dagent.home.dir, -Dnew.version, -Dnew.build">
      <echo>RHQ Agent Home=${agent.home.dir}</echo>

      <delete file="${java.io.tmpdir}/rhq-agent-version.properties" verbose="false" quiet="true" />
      <unjar dest="${java.io.tmpdir}">
         <fileset dir="${agent.home.dir}/lib">
            <include name="rhq-enterprise-agent-*.jar"/>
         </fileset>
         <patternset>
             <include name="rhq-agent-version.properties"/>
         </patternset>
      </unjar>

      <property name="agent.version.properties.file" location="${java.io.tmpdir}/rhq-agent-version.properties" />
      <property file="${agent.version.properties.file}"/>
      <echo>Current Agent Distro Version=${Product-Version}</echo>
      <echo>Current Agent Distro Build=${Build-Number}</echo>

      <replace file="${agent.version.properties.file}">
        <replacefilter token="Product-Version=${Product-Version}" value="Product-Version=${new.version}"/>
        <replacefilter token="Build-Number=${Build-Number}" value="Build-Number=${new.build}"/>
      </replace>

      <property name="agent.jar" location="${agent.home.dir}/lib/rhq-enterprise-agent-${Product-Version}.jar"/>
      <echo>RHQ Agent Jar Being Modified=${agent.jar}</echo>
      <jar file="${agent.jar}" update="true">
         <fileset dir="${java.io.tmpdir}">
            <include name="rhq-agent-version.properties" />
         </fileset>
      </jar>
      <delete file="${agent.version.properties.file}" />
      <move file="${agent.jar}" tofile="${agent.home.dir}/lib/rhq-enterprise-agent-${new.version}.jar" />

   </target>

   <!-- ========== SERVER STAMPING ========== -->

   <target name="init-server">
      <property name="env.RHQ_SERVER_HOME" location="dev-container"/>
      <property name="server.home.dir" location="${env.RHQ_SERVER_HOME}"/>
      <property name="server.download.dir" location="${server.home.dir}/modules/org/rhq/server-startup/main/deployments/rhq.ear/rhq-downloads/rhq-agent"/>
      <available property="_server.download.dir.exists" file="${server.download.dir}"/>
      <fail unless="_server.download.dir.exists" message="Cannot find the server download directory at ${server.download.dir}"/>

      <property name="agent.update.version.properties.file" location="${java.io.tmpdir}/rhq-agent-update-version.properties" />
      <delete file="${agent.update.version.properties.file}" verbose="false" quiet="true" />
      <unjar dest="${java.io.tmpdir}">
         <fileset dir="${server.download.dir}">
            <include name="rhq-enterprise-agent-*.jar" />
         </fileset>
         <patternset>
            <include name="rhq-agent-update-version.properties"/>
         </patternset>
      </unjar>
      <property file="${agent.update.version.properties.file}" />
      <echo>Current Agent Update Binary Version=${rhq-agent.latest.version}</echo>
      <echo>Current Agent Update Binary Build=${rhq-agent.latest.build-number}</echo>
      <fail unless="rhq-agent.latest.version" message="Cannot find the agent update binary's version" />
      <delete file="${agent.update.version.properties.file}" />
      <property name="agent.version" value="${rhq-agent.latest.version}" />

      <property name="agent.update.binary" value="rhq-enterprise-agent-${agent.version}.jar" />
      <property name="agent.update.binary.fullpath" location="${server.download.dir}/${agent.update.binary}"/>
      
   </target>

   <target name="stamp-server" depends="init-server" description="Stamps a new version on an agent update binary in a server. The following system properties can be passed on the command line: -Dserver.home.dir, -Dnew.version, -Dnew.build, -Dagent.version">
      <echo>RHQ Server Home=${server.home.dir}</echo>
      <echo>Agent Update Binary=${agent.update.binary.fullpath}</echo>

      <delete file="${server.download.dir}/rhq-server-agent-versions.properties" />

      <property name="_tmpdir" location="${java.io.tmpdir}/agent-binary-update"/>

      <!-- get the agent distro .zip from the agent update binary jar -->
      <delete dir="${_tmpdir}" verbose="false" quiet="true" />
      <mkdir dir="${_tmpdir}" />
      <unjar dest="${_tmpdir}">
         <fileset file="${agent.update.binary.fullpath}"/>
      </unjar>

      <!-- unzip the agent distro .zip - we need the agent distro exploded so we can stamp it -->
      <delete dir="${_tmpdir}/rhq-agent" verbose="false" quiet="true" />
      <unzip dest="${_tmpdir}">
         <fileset file="${_tmpdir}/rhq-enterprise-agent-${agent.version}.zip"/>
      </unzip>
      <delete file="${_tmpdir}/rhq-enterprise-agent-${agent.version}.zip"/>
         
      <!-- stamp the agent -->
      <property name="agent.home.dir" location="${_tmpdir}/rhq-agent"/>
      <antcall target="stamp-agent" />

      <echo file="${_tmpdir}/rhq-agent-update-version.properties">rhq-agent.latest.version=${new.version}
rhq-agent.latest.build-number=${new.build}</echo>

      <!-- package up the agent distro again -->
      <delete file="${_tmpdir}/rhq-enterprise-agent-${new.version}.zip" />
      <zip destfile="${_tmpdir}/rhq-enterprise-agent-${new.version}.zip" >
         <fileset dir="${_tmpdir}">
            <include name="rhq-agent/**" />
         </fileset>
      </zip>
      <delete dir="${_tmpdir}/rhq-agent" />

      <!-- rebuild the newly stamped agent update binary, renaming it with the new version -->
      <delete file="${agent.update.binary.fullpath}" />
      <zip file="${server.download.dir}/rhq-enterprise-agent-${new.version}.jar">
         <fileset dir="${_tmpdir}">
         </fileset>
      </zip>
   </target>

</project>